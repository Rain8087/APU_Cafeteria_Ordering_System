/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Apu_cafeteria_ordering_system;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jorda
 */
public class UpdateMenu extends javax.swing.JFrame {

    /**
     * Creates new form UpdateMenu
     */
    public UpdateMenu() {
        initComponents();
        LoadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMenu = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMenu = new javax.swing.JTable();
        lblDishName = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        txtDishName = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        lblPrice1 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        txtID = new javax.swing.JTextField();
        lblDishName1 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRetrieveData = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        cmbType = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblMenu.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        lblMenu.setText("Menu");

        tbMenu.setAutoCreateRowSorter(true);
        tbMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Dish Name", "Type", "Price (RM)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbMenu);

        lblDishName.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        lblDishName.setText("Dish name: ");

        lblPrice.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        lblPrice.setText("Price: ");

        txtDishName.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        txtPrice.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        lblPrice1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        lblPrice1.setText("Type: ");

        btnAdd.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtID.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        lblDishName1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        lblDishName1.setText("ID: ");

        btnUpdate.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnRetrieveData.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnRetrieveData.setText("Retrieve data");
        btnRetrieveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrieveDataActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        cmbType.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        cmbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Food Type", "Food", "Beverage" }));

        btnSave.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(lblDishName1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRetrieveData)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSave)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtID)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblDishName)
                            .addComponent(lblPrice)
                            .addComponent(lblPrice1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                            .addComponent(txtDishName)
                            .addComponent(cmbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDishName1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDishName)
                    .addComponent(txtDishName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnRetrieveData)
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    void LoadTable(){
        //Get table model
        DefaultTableModel model = (DefaultTableModel)tbMenu.getModel();
        try{
            //Remove any existing data on table
            model.setRowCount(0);
            //Read file
            BufferedReader br = new BufferedReader(new FileReader("Menu.txt"));
            //Get headerline
            String header = br.readLine().trim();
            //Get header
            String[] columnName = header.split(",");
            //Set column name to table
            model.setColumnIdentifiers(columnName);
            //Store rest of the data
            Object[] tableLine = br.lines().toArray();
            //Putting data into table
            for(int i = 0;i<tableLine.length;i++){
                String line = tableLine[i].toString().trim();
                String[] dataRow = line.split(",");
                model.addRow(dataRow);
            }
            //close file
            br.close();
        }
        //Exception handeling
        catch(Exception e){
            System.out.println("Error");
        }
    }
    
    void AddRow(String[] data){
        //Get table model
        DefaultTableModel model = (DefaultTableModel)tbMenu.getModel();
        //Add row to model
        model.addRow(data);
        //Clear textbox
        txtID.setText("");
        txtDishName.setText("");
        txtPrice.setText("");
        cmbType.setSelectedIndex(0);
    }
    
    void UpdateTable(int i,String id,String name,String price,String type){
        //Get table model
        DefaultTableModel model = (DefaultTableModel)tbMenu.getModel();
        //Update table
        model.setValueAt(id, i, 0);
        model.setValueAt(name, i, 1);
        model.setValueAt(price, i, 3);
        model.setValueAt(type, i, 2);
    }
    
    void SaveTable(){
        try{
            //Read file
            BufferedWriter bw = new BufferedWriter(new FileWriter("Menu.txt"));
            //Write header into file
            bw.write(tbMenu.getColumnName(0)+","+tbMenu.getColumnName(1)+","+tbMenu.getColumnName(2)+","+tbMenu.getColumnName(3)+"\n");
            //Write other data into file
            for(int i=0;i<tbMenu.getRowCount();i++){
                for(int j = 0;j<tbMenu.getColumnCount();j++){
                    bw.write((String)(tbMenu.getValueAt(i, j))+",");
                }
                bw.write("\n");
            }
            //close file
            bw.close();
            JOptionPane.showMessageDialog(null, "Menu saved", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
        } 
        //Exception handling
        catch (IOException ex) {
            Logger.getLogger(UpdateMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //Create flag
        int flg = 0;
        int flg1 = 0;
        int flg2 = 0;
        //Check input error/duplicate
        for(int i=0;i<tbMenu.getRowCount();i++){
            //If entered id is same as on table
            if(txtID.getText().trim().equals(tbMenu.getValueAt(i, 0))){
                flg = 1;
            }
            //If entered dish name is same as on table
            if(txtDishName.getText().trim().equals(tbMenu.getValueAt(i, 1))){
                flg1 = 1;
            }
            //If nothing is entered
            if(txtID.getText().length()==0||txtDishName.getText().length()==0||txtPrice.getText().length()==0||cmbType.getSelectedItem().toString()=="Select Food Type"){
                flg2 = 1;
            }
        }
        //Do action according to flag
        if(flg == 1){
            JOptionPane.showMessageDialog(null, "ID is occupied", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(flg1 == 1){
            JOptionPane.showMessageDialog(null, "Dish name is occupied", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(flg2 == 1){
            JOptionPane.showMessageDialog(null, "Please ensure that all field is filled", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(flg == 0 & flg1 == 0 & flg2 == 0){
            //Create container for data
            String[] data = new String[4];
            //Retrieving data from textbox
            try{
                //Check if user enter correct data type
                float pr = Float.parseFloat(txtPrice.getText().trim());
                //Add data into string array, data
                data[3] = String.format("%.02f", pr);
                data[0] = txtID.getText().trim();
                data[1] = txtDishName.getText().trim();
                data[2] = cmbType.getSelectedItem().toString().trim();
                //Pass data to class(addrow)
                AddRow(data);
                //Clear textbox & reset combo box
                txtID.setText("");
                txtDishName.setText("");
                txtPrice.setText("");
                cmbType.setSelectedIndex(0);
            }
            //Exception handling
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Please enter number for price", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //Create flag
        int flg = 0;
        int flg1 = 0;
        int flg2 = 0;
        //Get selected row
        int n = tbMenu.getSelectedRow();
        //Check input error
        for(int i=0;i<tbMenu.getRowCount();i++){
            if(i != n){
                if(txtID.getText().trim().equals(tbMenu.getValueAt(i, 0))){
                    flg = 1;
                }
                if(txtDishName.getText().trim().equals(tbMenu.getValueAt(i, 1))){
                    flg1 = 1;
                }
                if(txtID.getText().length()==0||txtDishName.getText().length()==0||txtPrice.getText().length()==0||cmbType.getSelectedItem().toString()=="Select Food Type"){
                    flg2 = 1;
                }
            }
        }
        //Do action according to flag
        if(flg == 1){
            JOptionPane.showMessageDialog(null, "ID is occupied", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(flg1 == 1){
            JOptionPane.showMessageDialog(null, "Dish name is occupied", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(flg2 == 1){
            JOptionPane.showMessageDialog(null, "Please ensure that all field is filled", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(flg == 0 & flg1 == 0 & flg2 == 0){
            if(n>=0){
                //Retrieving data from textbox
                try{
                    //Check if user enter correct data type
                    float pr = Float.parseFloat(txtPrice.getText().trim());
                    //Set data from text field into variable
                    String price = String.format("%.02f", pr);
                    String id = txtID.getText().trim();
                    String name = txtDishName.getText().trim();
                    String type = cmbType.getSelectedItem().toString().trim();
                    //Pass data to class(UpdateTable)
                    UpdateTable(n,id,name,price,type);
                    //Clear textbox & reset combo box
                    txtID.setText("");
                    txtDishName.setText("");
                    txtPrice.setText("");
                    cmbType.setSelectedIndex(0);
                }
                //Exception handeling
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Please enter number for price", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "No column is selected", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //Get table model
        DefaultTableModel model = (DefaultTableModel)tbMenu.getModel();
        //Get selected row
        int i = tbMenu.getSelectedRow();
        if(i>=0){
            //Remove selected row
            model.removeRow(i);
        }
        else{
            JOptionPane.showMessageDialog(null, "No column is selected", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRetrieveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrieveDataActionPerformed
        //Get table model
        DefaultTableModel model = (DefaultTableModel)tbMenu.getModel();
        //Get selected row
        int i = tbMenu.getSelectedRow();
        //Check if any row is selected
        if(i>=0){
            //Set text field according to data
            txtID.setText(model.getValueAt(i, 0).toString());
            txtDishName.setText(model.getValueAt(i, 1).toString());
            txtPrice.setText(model.getValueAt(i, 3).toString());
            String type = (model.getValueAt(i, 2).toString());
            if(type.equals("Food")){
                cmbType.setSelectedIndex(1);
            }
            else if(type.equals("Beverage")){
                cmbType.setSelectedIndex(2);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No column is selected", "PopUp Dialog", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnRetrieveDataActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        //Save table by calling same class method, SaveTable
        SaveTable();
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRetrieveData;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDishName;
    private javax.swing.JLabel lblDishName1;
    private javax.swing.JLabel lblMenu;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblPrice1;
    private javax.swing.JTable tbMenu;
    private javax.swing.JTextField txtDishName;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
